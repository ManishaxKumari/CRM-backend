# Generated by Django 5.2.1 on 2025-06-28 08:36

import base.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('top_management', 'Top Management'), ('business_head', 'Business Head'), ('business_head_ops', 'Business Head - Ops'), ('rm_head', 'RM Head'), ('rm', 'Relationship Manager'), ('ops_team_lead', 'Operations Team Lead'), ('ops_exec', 'Operations Executive')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('managed_groups', models.ManyToManyField(blank=True, help_text='Groups managed by this user', related_name='group_leaders', to='auth.group')),
                ('manager', models.ForeignKey(blank=True, help_text='Direct manager in the hierarchy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['role', 'username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(blank=True, editable=False, max_length=20, null=True, unique=True)),
                ('client_full_name', models.CharField(max_length=255)),
                ('family_head_name', models.CharField(blank=True, max_length=255, null=True)),
                ('address_kyc', models.TextField()),
                ('date_of_birth', models.DateField()),
                ('pan_number', models.CharField(max_length=10, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('mobile_number', models.CharField(max_length=15)),
                ('first_investment_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('muted', 'Muted')], default='active', max_length=20)),
                ('muted_reason', models.TextField(blank=True, null=True)),
                ('muted_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_client_profiles', to=settings.AUTH_USER_MODEL)),
                ('mapped_ops_exec', models.ForeignKey(blank=True, limit_choices_to={'role': 'ops_exec'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ops_clients', to=settings.AUTH_USER_MODEL)),
                ('mapped_rm', models.ForeignKey(blank=True, limit_choices_to={'role': 'rm'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rm_clients', to=settings.AUTH_USER_MODEL)),
                ('muted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='muted_clients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Client Profile',
                'verbose_name_plural': 'Client Profiles',
                'ordering': ['client_full_name'],
                'permissions': [('can_mute_client', 'Can mute/unmute client'), ('can_change_pan', 'Can change PAN number'), ('can_change_name', 'Can change client name')],
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('contact_info', models.CharField(default='N/A', max_length=255)),
                ('aum', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('sip_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('demat_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_clients', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, limit_choices_to={'role': 'rm'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clients', to=settings.AUTH_USER_MODEL)),
                ('client_profile', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='legacy_client', to='base.clientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ClientProfileModification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('modification_data', models.JSONField(help_text='Stores the changed fields and values')),
                ('reason', models.TextField()),
                ('requires_top_management', models.BooleanField(default=False)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_modifications', to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifications', to='base.clientprofile')),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_modifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Client Profile Modification',
                'verbose_name_plural': 'Client Profile Modifications',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='InvestmentPlanReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal', models.CharField(blank=True, max_length=255, null=True)),
                ('principal_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('tenure_years', models.PositiveIntegerField(default=1)),
                ('monthly_investment', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('expected_return_rate', models.DecimalField(decimal_places=2, default=12.0, help_text='Expected annual return percentage', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_reviewed', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='investment_reviews', to='base.client')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_investment_plans', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead_id', models.CharField(blank=True, editable=False, max_length=20, null=True, unique=True)),
                ('client_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('mobile', models.CharField(blank=True, max_length=15, null=True)),
                ('source', models.CharField(blank=True, choices=[('existing_client', 'Existing Client'), ('own_circle', 'Own Circle'), ('social_media', 'Social Media'), ('referral', 'Referral'), ('other', 'Other')], max_length=50, null=True)),
                ('source_details', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('new', 'New Lead'), ('cold', 'Cold Lead'), ('warm', 'Warm Lead'), ('hot', 'Hot Lead'), ('contacted', 'Contacted'), ('follow_up', 'Follow Up'), ('conversion_requested', 'Conversion Requested'), ('converted', 'Converted to Client'), ('lost', 'Lost Lead')], default='new', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_interaction_date', models.DateTimeField(blank=True, null=True)),
                ('next_interaction_date', models.DateField(blank=True, null=True)),
                ('converted_at', models.DateTimeField(blank=True, null=True)),
                ('converted', models.BooleanField(default=False)),
                ('needs_reassignment_approval', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('probability', models.PositiveIntegerField(default=0, help_text='Probability of conversion (0-100)%', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assigned_to', models.ForeignKey(limit_choices_to={'role__in': ['rm', 'rm_head', 'business_head']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leads', to=settings.AUTH_USER_MODEL)),
                ('client_profile', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead_profile', to='base.clientprofile')),
                ('converted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='converted_leads', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_leads', to=settings.AUTH_USER_MODEL)),
                ('reassignment_requested_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reassignment_requests', to=settings.AUTH_USER_MODEL)),
                ('reference_client', models.ForeignKey(blank=True, help_text='If source is Existing Client', limit_choices_to={'converted': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.lead')),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': [('can_convert_lead', 'Can convert lead to client'), ('can_reassign_lead', 'Can reassign lead to another RM')],
            },
        ),
        migrations.AddField(
            model_name='client',
            name='lead',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='client', to='base.lead'),
        ),
        migrations.CreateModel(
            name='LeadInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('call', 'Phone Call'), ('meeting', 'In-Person Meeting'), ('email', 'Email'), ('message', 'Message'), ('other', 'Other')], max_length=50)),
                ('interaction_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField()),
                ('next_step', models.TextField(blank=True, null=True)),
                ('next_date', models.DateField(blank=True, null=True)),
                ('interacted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='base.lead')),
            ],
            options={
                'verbose_name': 'Lead Interaction',
                'verbose_name_plural': 'Lead Interactions',
                'ordering': ['-interaction_date'],
            },
        ),
        migrations.CreateModel(
            name='LeadStatusChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('old_status', models.CharField(max_length=255)),
                ('new_status', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True, null=True)),
                ('needs_approval', models.BooleanField(default=False)),
                ('approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approval_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approvals_to_make', to=settings.AUTH_USER_MODEL)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_status_changes', to=settings.AUTH_USER_MODEL)),
                ('changed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changes_made', to=settings.AUTH_USER_MODEL)),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_changes', to='base.lead')),
            ],
            options={
                'verbose_name': 'Status Change',
                'verbose_name_plural': 'Status Changes',
                'ordering': ['-changed_at'],
            },
        ),
        migrations.CreateModel(
            name='MFUCANAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('mfu', 'MFU CAN Account'), ('motilal', 'Motilal Demat'), ('prabhudas', 'Prabhudas Lilladher Demat')], max_length=20)),
                ('account_number', models.CharField(max_length=50, unique=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('folio_number', models.CharField(max_length=50)),
                ('amc_name', models.CharField(max_length=100)),
                ('kyc_status', models.BooleanField(default=False)),
                ('last_transaction_date', models.DateField(blank=True, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mfu_accounts', to='base.clientprofile')),
            ],
            options={
                'verbose_name': 'MFU CAN Account',
                'verbose_name_plural': 'MFU CAN Accounts',
            },
        ),
        migrations.CreateModel(
            name='MotilalDematAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('mfu', 'MFU CAN Account'), ('motilal', 'Motilal Demat'), ('prabhudas', 'Prabhudas Lilladher Demat')], max_length=20)),
                ('account_number', models.CharField(max_length=50, unique=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('broker_name', models.CharField(max_length=100)),
                ('dp_id', models.CharField(max_length=20)),
                ('kyc_status', models.BooleanField(default=False)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('trading_enabled', models.BooleanField(default=False)),
                ('margin_enabled', models.BooleanField(default=False)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='motilal_accounts', to='base.clientprofile')),
            ],
            options={
                'verbose_name': 'Motilal Demat Account',
                'verbose_name_plural': 'Motilal Demat Accounts',
            },
        ),
        migrations.CreateModel(
            name='NoteList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='note_lists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Note List',
                'verbose_name_plural': 'Note Lists',
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('creation_date', models.DateField(default=django.utils.timezone.now)),
                ('reminder_date', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('attachment', models.FileField(blank=True, help_text='Maximum file size: 500KB', null=True, upload_to=base.models.note_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png', 'xlsx', 'xls'])])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to=settings.AUTH_USER_MODEL)),
                ('note_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='base.notelist')),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='PrabhudasDematAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('mfu', 'MFU CAN Account'), ('motilal', 'Motilal Demat'), ('prabhudas', 'Prabhudas Lilladher Demat')], max_length=20)),
                ('account_number', models.CharField(max_length=50, unique=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('broker_name', models.CharField(max_length=100)),
                ('dp_id', models.CharField(max_length=20)),
                ('kyc_status', models.BooleanField(default=False)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('commodity_enabled', models.BooleanField(default=False)),
                ('currency_enabled', models.BooleanField(default=False)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prabhudas_accounts', to='base.clientprofile')),
            ],
            options={
                'verbose_name': 'Prabhudas Demat Account',
                'verbose_name_plural': 'Prabhudas Demat Accounts',
            },
        ),
        migrations.CreateModel(
            name='ProductDiscussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.CharField(choices=[('mf_sip', 'Mutual Fund SIP'), ('mf_lumpsum', 'Mutual Fund Lumpsum'), ('equity', 'Equity'), ('ai_portfolio', 'AI Portfolio'), ('loans', 'Loans'), ('insurance', 'Insurance'), ('pms', 'Portfolio Management Services'), ('aif', 'Alternative Investment Funds'), ('other', 'Other')], max_length=50)),
                ('interest_level', models.PositiveIntegerField(help_text='Interest level (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('discussed_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('discussed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_discussions', to='base.lead')),
            ],
            options={
                'verbose_name': 'Product Discussion',
                'verbose_name_plural': 'Product Discussions',
                'ordering': ['-discussed_on'],
            },
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(default='Reminder message')),
                ('remind_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_done', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_service_requests', to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to='base.client')),
                ('raised_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raised_service_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_by', models.ForeignKey(blank=True, help_text='User who assigned this task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_ops_team', models.BooleanField(default=False, help_text='Is this an operations team?')),
                ('leader', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['rm_head', 'ops_team_lead']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_teams', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Team Membership',
                'verbose_name_plural': 'Team Memberships',
                'unique_together': {('user', 'team')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='teams',
            field=models.ManyToManyField(blank=True, help_text='Teams this user belongs to', related_name='members', through='base.TeamMembership', to='base.team'),
        ),
        migrations.CreateModel(
            name='BusinessTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.DateField()),
                ('total_sip', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_demat', models.PositiveIntegerField(default=0)),
                ('total_aum', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='business_metrics', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='business_metrics', to='base.team')),
            ],
            options={
                'unique_together': {('month', 'user')},
            },
        ),
    ]
